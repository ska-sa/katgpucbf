/*******************************************************************************
 * Copyright (c) 2021-2025, National Research Foundation (SARAO)
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy
 * of the License at
 *
 *   https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

/* This file tells Jenkins how to execute the qualification tests for this repo.
 * Everything runs in docker containers, so in theory any Jenkins server should
 * be able to parse this file, but the ini-file needs to be configured for the
 * hardware it is running on. The Docker Engine being used needs to have been
 * configured to use the NVIDIA Container Runtime and the node which the
 * container runs on needs the NVIDIA OFED driver installed.
 *
 * Additionally the Jenkins server also needs access to an NVIDIA NIC that
 * supports ibverbs. The ibverbs drivers need to be passed into the Jenkins
 * container using specific flags.
 *
 * This Jenkinsfile is intended to be run from a parametrised job. The
 * following parameters are required:
 *
 * - label: agent label where the task may run
 * - katgpucbf_image: image path for katgpucbf (for system under test)
 * - katsdpcontroller_image: image path for katsdpcontroller (for product controller)
 * - branch: branch of katgpucbf from which to obtain test code
 * - ini: relative path (from repo root) to pytest configuration file
 * - extra_args: extra user-provided command-line arguments
 * - environment: name for the test environment (for use in email notification)
 *
 * For more information on the qualification framework, see
 * katgpucbf/doc/qualification.rst
 */
def COMMIT_ID = 'unknown'
pipeline {
  agent {
    dockerfile {
      label params.label
      registryCredentialsId 'dockerhub'  // Supply credentials to avoid rate limit

      /* Use the Jenkins-specific stage of the Dockerfile as the image for
       * testing. This provides the appropriate dependencies.
       */
      additionalBuildArgs '--target=jenkins'

      /* The following argument needs to be specified in order for the container
       * to launch correctly.
       *
       * --network=host: The Docker container requires access to the high-speed
       * CBF network. This command passes all the host network interfaces to the
       * container to be used as required.
       *
       * --ulimit=memlock=-1: This argument is required when using ibverbs.
       *
       * --ulimit=rtprio=1: Allows qualification tests to use real-time scheduling.
       *
       * -e NVIDIA_MOFED=enabled: This will pass the drivers required for ibverbs
       * to the container.
       *
       * --runtime=nvidia': The NVIDIA Container Runtime is used to pass the ibverbs
       * devices into the container.
       */
      args '--network=host --ulimit=memlock=-1 --ulimit=rtprio=1 -e NVIDIA_MOFED=enabled --runtime=nvidia'
    }
  }

  options {
    disableConcurrentBuilds()
    timeout(time: 16, unit: 'HOURS')
  }

  stages {
    stage('Install requirements to run qualification tests') {
      steps {
        // Workaround for https://github.com/JelteF/PyLaTeX/issues/391
        // See NGC-1657
        sh 'pip install uv==0.8.24'
        // Extract the pinned versions of pylatex and its dependencies
        sh 'echo "pylatex" | uv pip compile - -c qualification/requirements.txt -o constrain-setuptools.txt'
        // Pin setuptools to a version that is known to work (it still warns)
        sh 'echo "setuptools<78" >> constrain-setuptools.txt'
        // Using PIP_CONSTRAINT pins the version used for the build environment too
        sh 'PIP_CONSTRAINT="constrain-setuptools.txt" pip install pylatex'
        sh 'pip install -r qualification/requirements.txt'
        sh 'pip install --no-deps ".[qualification]" && pip check'
      }
    }

    /* This stage executes the qualification tests on the latest docker image
     * of katgpucbf that has been previously unit-tested, and generates a report of the
     * qualification test results.
     */
    stage('Run qualification tests') {
      steps {
        /* Run the actual pytest.
         * Jenkins will not run subsequent steps if pytest returns a non-zero
         * exit code. Passing --suppress-tests-failed-exit-code causes the
         * exit code to be zero if there are failed tests, so that we can still
         * get the report in that case. The junit step will detect the failed
         * tests and mark the build as unstable.
         */
        sh '''
          spead2_net_raw pytest -v -c ${ini} qualification \
          --suppress-tests-failed-exit-code \
          --image-override katgpucbf:${katgpucbf_image} \
          --image-override katsdpcontroller:${katsdpcontroller_image} \
          --junitxml=result.xml \
          ${extra_args}
        '''
      }
    }

    stage('Publish results') {
      steps {
        // skipPublishingChecks because it's a feature we don't use.
        // See https://stackoverflow.com/questions/67162746/how-to-get-rid-of-noisy-warning-no-suitable-checks-publisher-found/68992826#68992826
        junit testResults: 'result.xml', skipPublishingChecks: true

        // Compress and publish json file so that at least we have that.
        // 'includes' specifies which files from the current directory to archive;
        // we only want the linked file itself
        sh 'xz --keep --force -T 0 report.json'
        publishHTML(target: [
          keepAll: true,
          reportName: 'Qualification Test Intermediate JSON',
          reportDir: '',
          reportFiles: 'report.json.xz',
          includes: 'report.json.xz'
        ])

        // Save any numpy arrays recorded by failing tests. We use zstd
        // because --xz and --gzip can be extremely slow if there is a
        // lot of data.
        sh 'tar --zstd -cf arrays.tar.zstd -C qualification arrays/'
        publishHTML(target: [
          keepAll: true,
          reportName: 'Qualification Test Raw Failed Arrays',
          reportDir: '',
          reportFiles: 'arrays.tar.zstd',
          includes: 'arrays.tar.zstd'
        ])

        script {
          // Generate and publish test report
          COMMIT_ID = sh(script: 'qualification/report/generate_pdf.py report.json report.pdf -c', returnStdout: true)
          currentBuild.displayName = "#${BUILD_NUMBER} (${COMMIT_ID})"
        }
        publishHTML(target: [
          keepAll: true,
          reportName: 'Qualification Test Report',
          reportDir: '',
          reportFiles: 'report.pdf',
          includes: 'report.pdf'
        ])

        // If that worked, we can probably generate and publish a procedure as well
        sh 'qualification/report/generate_pdf.py report.json procedure.pdf --generate-procedure-doc'
        publishHTML(target: [
          keepAll: true,
          reportName: 'Qualification Test Procedure',
          reportDir: '',
          reportFiles: 'procedure.pdf',
          includes: 'procedure.pdf'
        ])
      }
    }
  }

  /* This post stage is configured to always run at the end of this pipeline,
   * regardless of the completion status. In this stage an email is sent to
   * the specified address with details of the Jenkins job and a PDF report
   * containing the qualification test results. Any running CBF part
   * of the Jenkins qualification test that continues to run at this point will be
   * stopped.
   */
  post {
    always {
      emailext(
        attachLog: true,
        body: """<b>Overall Test Results:</b> ${env.JOB_NAME} - Build#${env.BUILD_NUMBER} - ${currentBuild.result}<br>
        <b>Node:</b> ${env.NODE_NAME}<br>
        <b>Duration:</b> ${currentBuild.durationString}<br>
        <b>Build URL:</b> ${env.BUILD_URL}<br>
        <b>Test Image Commit ID:</b> ${COMMIT_ID} (${params.katgpucbf_image})<br>
        <b>katsdpcontroller image:</b> ${params.katsdpcontroller_image}<br>
        <b>Qualification Tests Commit ID:</b> ${env.GIT_COMMIT} (${params.branch})<br>
        <br>
        <i>Note: This is an Automated email notification.</i>""",
        recipientProviders: [developers(), requestor()],
        subject: "${params.environment} Qualification Tests - katgpucbf - \$BUILD_STATUS!",
        to: '$DEFAULT_RECIPIENTS'
      )
      sh "qualification/cleanup.py -- ${ini}"
    }
    // The final step removes the workspace when the build is complete.
    cleanup {
      cleanWs()
    }
  }
}
