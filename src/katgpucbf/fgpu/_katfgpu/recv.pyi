from typing import Optional, Sequence, Tuple, Any

from .monitor import Monitor


class Chunk:
    timestamp: int
    pol: int

    def __init__(self, base: Any) -> None: ...
    @property
    def present(self) -> Sequence[bool]: ...
    @property
    def base(self) -> Any: ...


class Ringbuffer:
    def __init__(self, cap: int) -> None: ...
    def pop(self) -> Chunk: ...
    def try_pop(self) -> Chunk: ...
    def try_push(self, item: Chunk) -> None: ...
    @property
    def data_fd(self) -> int: ...


class Stream:
    def __init__(self, pol: int, sample_bits: int, packet_samples: int,
                 chunk_samples: int, ringbuffer: Ringbuffer,
                 thread_affinity: int = ..., *, mask_timestamp: bool = ...,
                 monitor: Optional[Monitor] = ...) -> None: ...
    @property
    def ringbuffer(self) -> Ringbuffer: ...
    @property
    def pol(self) -> int: ...
    @property
    def sample_bits(self) -> int: ...
    @property
    def packet_samples(self) -> int: ...
    @property
    def chunk_samples(self) -> int: ...
    @property
    def chunk_packets(self) -> int: ...
    @property
    def chunk_bytes(self) -> int: ...
    def add_chunk(self, chunk: Chunk) -> None: ...
    def add_udp_pcap_file_reader(self, filename: str) -> None: ...
    def add_udp_ibv_reader(self, endpoints: Sequence[Tuple[str, int]],
                           interface_address: str, buffer_size: int, comp_vector: int = ...,
                           max_poll: int = ...) -> None: ...
    def stop(self) -> None: ...
