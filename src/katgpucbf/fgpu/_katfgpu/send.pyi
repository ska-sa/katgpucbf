from typing import List, Any


class Chunk:
    timestamp: int
    channels: int
    acc_len: int
    frames: int
    pols: int

    def __init__(self, base: Any) -> None: ...

    @property
    def base(self) -> Any: ...


class Ringbuffer:
    def __init__(self, cap: int) -> None: ...
    def pop(self) -> Chunk: ...
    def try_pop(self) -> Chunk: ...
    def try_push(self, item: Chunk) -> None: ...
    @property
    def data_fd(self) -> int: ...


class Sender:
    def __init__(self, initial_buffers: List[object],
                 thread_affinity: int, comp_vector: int,
                 endpoints: List[Tuple[str, int]],
                 ttl: int, interface_address: str, ibv: bool,
                 max_packet_size: int, rate: float, max_heaps: int) -> None: ...
    def send_chunk(self, chunk: Chunk) -> None: ...
    def stop(self) -> None: ...
    @property
    def free_ring(self) -> Ringbuffer: ...
