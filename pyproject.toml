[build-system]
requires = [
	"setuptools>=45",
	"setuptools_scm[toml]>=6.0",
]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
line_length = 120
known_local_folder = ["noisy_search", "remote", "sighandler"]

[tool.ruff]
line-length = 120
[tool.ruff.lint]
select = [
    "E", "W",  # pycodestyle
    "F",  # pyflakes
    "D",  # pydocstyle
    "N",  # pep8-naming
    "B",  # flake8-bugbear
]
extend-ignore = ["D105", "D107"]  # docstrings for magic methods
[tool.ruff.lint.extend-per-file-ignores]
"scratch/**/*.py" = ["D"]  # Don't fuss with docstrings in scratch/
# Temporary, until the code can be cleaned up
# (this is what pydocstyle used to do)
"test_*.py" = ["D"]
"test/**/*.py" = ["D"]
[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
testpaths = "test"
addopts = "--cov-context=test --cov-report html --import-mode=prepend"
markers = ["mask_timestamp", "use_vkgdr", "cmdline_args", "spectra_per_heap", "slow"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
branch = true
command_line = "-m pytest"
source = [
	"katgpucbf",
	"test/",
]

[tool.coverage.html]
show_contexts = true

[tool.coverage.paths]
source = [
	"src",
	"*/site-packages",
]

[tool.coverage.report]
exclude_lines = [
	'#\s*(pragma|PRAGMA)[:\s]?\s*(no|NO)\s*(cover|COVER)',  # Default from coverage
	'@(?:numba\.)?(?:njit|cfunc)',  # Compiled so coverage can't see the code being executed
	'@(abc\.)?abstractmethod',
]
